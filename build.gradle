import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.3.11.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'org.sonarqube' version '3.2.0'
    id 'org.springframework.boot' version '2.3.11.RELEASE'
    id 'info.solidsoft.pitest' version '1.6.0'
    id 'au.com.dius.pact' version '4.2.0'
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '3.0.0'
sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntimeOnly.extendsFrom testRuntimeOnly
}

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
    archiveName 'div-document-generator.jar'
}

mainClassName = 'uk.gov.hmcts.reform.divorce.documentgenerator.DocumentGeneratorApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task fortifyScan(type: JavaExec)  {
    mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
    toolVersion = '8.29'
    configFile = project(':').file('checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('suppressions.xml')]
}

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
    commonsIo: '2.7',
    commonsLang3: '3.9',
    commonsBeanUtils: '1.9.4',
    feignHttpClient: '10.2.0',
    gradlePitest: '1.4.5',
    guava: '30.0-jre',
    jacksonDatabind: '2.13.3',
    apacheLogging: '2.17.1',
    jsonAssert: '1.2.3',
    junit: '4.13.1',
    lombok: '1.18.22',
    logbackVersion: '1.2.10',
    nimbus: '5.1',
    pdfbox: '2.0.8',
    pitest: '1.4.10',
    powerMock: '2.0.0',
    puppyCrawl: '8.29',
    reformPropertiesVolume: '0.0.4',
    reformsJavaLogging: '5.1.5',
    restAssured: '3.0.3',
    serenity: '2.2.13',
    serenityCucumber: '1.9.51',
    serviceTokenGenerator: '3.0.0',
    sonarPitest: '0.5',
    spring_security_rsa: '1.0.9.RELEASE',
    springBoot: '2.3.11.RELEASE',
    springCloud: '2.2.5.RELEASE',
    springfoxSwagger: '2.9.2',
    springHateoas: '0.25.1.RELEASE',
    unirest: '1.4.9',
    wiremockVersion: '2.27.2',
    springSecurityCrypto: '5.4.5',
    tomcatEmbedCore: '9.0.68',
    tomcatEmbedWebsocket: '9.0.68',
    tomcatEmbedEl: '9.0.68',
    pact_version: '4.1.11',
    httpComponents: '4.5.13',
    bouncycastle: '1.61'
]

dependencies {
    //integration test
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestImplementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: versions.nimbus
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: versions.jsonAssert
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    integrationTestImplementation (group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator){
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
    }

    integrationTestImplementation (group: 'com.google.guava', name:'guava', version: versions.guava) {
        force = true
    }
    implementation (group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils) {
        force = true
    }

    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-core', version: versions.tomcatEmbedCore) {
        force = true
    }
    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-websocket', version: versions.tomcatEmbedWebsocket) {
        force = true
    }
    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-el', version: versions.tomcatEmbedEl) {
        force = true
    }

    implementation (group:  'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
        force = true
        exclude group: 'org.springframework.security', module: 'spring-security-crypto'
    }

    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: versions.bouncycastle

    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.apacheLogging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.apacheLogging

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version:  versions.puppyCrawl
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: versions.springCloud
    implementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign',  version: versions.springCloud) {
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
        exclude group: 'org.bouncycastle'
    }

    implementation (group: 'com.google.guava', name:'guava', version: versions.guava) {
        force = true
    }
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: versions.springHateoas
    implementation group: 'org.apache.commons', name: 'commons-lang3', version : versions.commonsLang3

    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging', version: versions.reformsJavaLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging-appinsights', version: versions.reformsJavaLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging-spring', version: versions.reformsJavaLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'java-logging-httpcomponents', version: versions.reformsJavaLogging
    implementation group: 'com.github.hmcts', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation (group: 'com.github.hmcts', name:'service-auth-provider-java-client', version: versions.serviceTokenGenerator) {
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
        exclude group: 'org.bouncycastle'
    }

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logbackVersion

    implementation group: 'junit', name: 'junit', version: versions.junit
    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group:'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group:'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents

    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation("org.springframework.boot:spring-boot-starter-validation")
    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testImplementation group: 'org.powermock', name:'powermock-api-mockito2', version:versions.powerMock
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: versions.powerMock
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        exclude(module: 'commons-logging')
    }
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.2.2', classifier: 'all'
    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

    contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
    contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

}

dependencyManagement {
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
        dependencySet(group: 'com.fasterxml.jackson.core', version: versions.jacksonDatabind) {
            entry 'jackson-core'
            entry 'jackson-databind'
            entry 'jackson-annotations'
        }

        dependencySet(group: 'org.apache.logging.log4j', version: '2.17.1') {
            entry 'log4j-api'
            entry 'log4j-to-slf4j'
        }

        //CVE-2022-22965
        dependencySet(group: 'org.springframework', version: '5.2.22.RELEASE') {
            entry 'spring-aop'
            entry 'spring-beans'
            entry 'spring-context'
            entry 'spring-context-support'
            entry 'spring-core'
            entry 'spring-expression'
            entry 'spring-jcl'
            entry 'spring-web'
            entry 'spring-webmvc'
        }

        //CVE-2022-25857
        dependencySet(group: 'org.yaml', version: '1.33') {
            entry 'snakeyaml'
        }

        dependency group: 'com.netflix.servo',name: 'servo-core', version: '0.13.2'
        dependency group: 'org.glassfish', name: 'jakarta.el', version: '3.0.4'
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

dependencies {
    integrationTestImplementation(sourceSets.test.output)
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

processContractTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.documentgenerator.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    main = bootJar.mainClassName
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
    }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    //finalizedBy aggregate
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
}


task printVersion {
    doLast {
        print project.version
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.documentgenerator.*']
    excludedClasses = ['uk.gov.hmcts.reform.divorce.documentgenerator.config.*',
                       'uk.gov.hmcts.reform.divorce.documentgenerator.domain.*',
                       'uk.gov.hmcts.reform.divorce.documentgenerator.exception.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

task developAddRelaseSuffix() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/documentgenerator/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/documentgenerator/exception/*',
    '**uk/gov/hmcts/reform/divorce/documentgenerator/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/documentgenerator/DocumentGeneratorApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "DivorceDocumentGenerator"
        property "sonar.projectName", "Divorce :: document-generator"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}
